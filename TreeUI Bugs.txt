There are 3 elements that need to be saved somehow:
-The gameobjects
-The UIElements(buttons and shit on the panel)
-The Datanodes and network connections
Each gameobject always has a datanode. Does each datanode have a gameobject? (Yes, but some gameobjects have multiple datanodes)
Store the gameobjects(Easy, [id,type,x,y])
Store the UIElements(Panels will)


How should I design the txt format for the Panel file saving?

The coordinate system is all kinds of fucked up.

I want the panel to have a save and load function.
Panels will accept a string or whatever and create the uielements and attach them to the panel.
BUT what about the datanodes and network connections?
The UIElements will remember the arguments used to create them, the nodes can be created that way.
BUT what about the network connections?
Hmmm... network connections will be handled outside the panel. The panel doesn't any internal connections anyway

How would I save panels within panels?
Additional problem, self-referencing panels
Maybe use a map? How would I find all the panels?
Maybe just scrap the idea of a recursive save string.
POTENTIAL SOLUTION: Only save down ONE level. All panels need to be assigned then.
This would allow users to save individual panels, I like this solution.
How would we assign the panels to the origin objects?
The TreeUI Manager will handle loading of the panels.
It will take in an array of panels maybe?(This would mean that we would need to create the leaf panels first)
Make an incubator class which will store the lower panels.
How would it ask for the panels for the origin objects?
Give it a getter which will get the number of origin objects.
Getter for origin object identification.
Setter for origin object which sets the panel.
The incubator will need to keep track of all origin objects.
Basically, the incubator will handle all the creation of the panels and uielements. Then we will visualize it.
All UIElements will have a method which displays it's parameters.

SOLUTION: REMOVE ALL CONSTRUCTORS FROM UIELEMENTS

POTENTIAL SOLUTION: Implement an object id value and recursive down, marking ALL objects(NO REPEATS)
Then mark all panel connections. This will also fix saving the network issue.[Maybe Not]

Should the string store the entire paneltree?
If it doesn't then I need a way to assign the panel to the originobjects in the panel.

----
ISSUE: Could we automate the id giving?
Would need to pass gameobject construction through a centralized class
GameObject Manager would make sense...
I want to force an object to run some code from it's parent, is that even possible?
----
Create a button which is capable of switching game states[DONE]
Create a new game state which is an actual "main menu"[DONE]Main menu will use the TreeUI that the demo uses for the menu[DONE]
BUG: The panel is not rendering on startup, but the bug disappears once the oo is toggled.[The panel was at -50 -100]
Make panel active on startup[DONE]
The new main menu should have the demo option and an option to load the editor[DONE]