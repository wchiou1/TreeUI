There are 3 elements that need to be saved somehow:
-The gameobjects
-The UIElements(buttons and shit on the panel)
-The Datanodes and network connections
Each gameobject always has a datanode. Does each datanode have a gameobject? (Yes, but some gameobjects have multiple datanodes)
Store the gameobjects(Easy, [id,type,x,y])
Store the UIElements(Panels will)

SOLUTION: REMOVE ALL CONSTRUCTORS FROM UIELEMENTS
Will need to implement dynamic class reading. TreeUI will search for the class/java file it needs using a mods folder.
The user will NOT need to modify any enums. There will be NO enum for UIElements.

POTENTIAL SOLUTION: Implement an object id value and recursive down, marking ALL objects(NO REPEATS)
Then mark all panel connections. This will also fix saving the network issue.[Maybe Not]

Should the string store the entire paneltree?
If it doesn't then I need a way to assign the panel to the originobjects in the panel.[DONE]

FINAL SOLUTION: We use Strings to call the constructors(NO CLASS EXCEPT FOR THE PANEL CLASS WILL BE HARDCODED)
All UIElements will have a (x,y) constructor. We will use newInstance/createInstance to construct the UIElements.
Existing UIElements will be listed in an Enum which has the raw class string.
Once a UIElement has been created, the parameters will be accessible using a <String,Object>Hashtable
with the string being the parameter name and the object its value.

KEEP IN MIND: Should panels be modifiable? What point would that serve that UIElements couldn't do?

MAJOR ERROR: The panel depends on the uielement xy to be set to correctly position it.
SOLUTION: Use rx and ry instead.
---TIME TO IMPLEMENT THE EDITOR---
All interactable objects will have a wrapper class which responds to a right-click
This wrapper class will accept a constructor class on creation.
There will be a wrapper class for the incubator.(constructor class)
There will be a hardcoded panel which will display variables.
Do we need wrapper classes?(YES, otherwise we would need to implement a way to prevent the editor from working during normal operation)

How will we make new uielements?
	Maybe we right-click on a panel?
		Right-click with create a placeholder object at click location, placeholder obj will have a panel attached which allows user to select what the placeholder should morph into
How will we make new panels?
	So hacky solution:
		We have a hardcoded panel which covers the ENTIRE canvas. Right-click on this panel will create an origin_object with a built in panel.
How will we modify the variables?
	We will have a hardcoded panel.
How will we form datanode connections?
	I will create a connector UIItem.
How will we disconnect datanode connections?
	I will create a disconnector UIItem.
ISSUE: Need to figure out how to select an element for variable modifying
PROBLEM: Need to add in right-click functionality for mouse manager
Solution-kinda: Maybe don't have right-click?

MAJOR-ISSUE: Need to troubleshoot why class scanning is not working. Need to get my desktop.
----Editor Plan----
Create right-click which will check for the specialized panel and panel wrappers.
----
Create a button which is capable of switching game states[DONE]
Create a new game state which is an actual "main menu"[DONE]Main menu will use the TreeUI that the demo uses for the menu[DONE]
BUG: The panel is not rendering on startup, but the bug disappears once the oo is toggled.[The panel was at -50 -100]
Make panel active on startup[DONE]
The new main menu should have the demo option and an option to load the editor[DONE]